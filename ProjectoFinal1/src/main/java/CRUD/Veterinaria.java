
package CRUD;


import Conexion.conexion;
import java.io.IOException;
import java.sql.Connection;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.TableModel;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.text.ParseException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


public class Veterinaria extends javax.swing.JFrame {

    conexion con = new conexion();
    Connection conect;
    DefaultTableModel model;
    Statement st;
    ResultSet rs;
    int idc;
    public Veterinaria() {
        initComponents();
        this.setLocationRelativeTo(null);
        Consultar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cboTipo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtarticulo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtprecio = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtcantidad = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Alajuela = new javax.swing.JRadioButton();
        Heredia = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        date = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtdescuento = new javax.swing.JTextField();
        txttotal = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        BTNagregar = new javax.swing.JButton();
        BTNmodificar = new javax.swing.JButton();
        BTNeliminar = new javax.swing.JButton();
        BTNlimpiar = new javax.swing.JButton();
        btnReporte = new javax.swing.JButton();
        BTNsalir = new javax.swing.JButton();
        BTNexcell = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Veterinaria", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 2, 24))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(204, 204, 255));
        jPanel1.setToolTipText("");

        jLabel1.setText("Nombre del Articulo");

        cboTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Medicina", "Accesorio", "Comida", " " }));

        jLabel2.setText("Tipo de Articulo");

        jLabel3.setText("Precio");

        jLabel4.setText("Cantidad en el inventario");

        jLabel5.setText("Sitio donde se encuentra el articulo ");

        buttonGroup1.add(Alajuela);
        Alajuela.setText("Alajuela");
        Alajuela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlajuelaActionPerformed(evt);
            }
        });

        buttonGroup1.add(Heredia);
        Heredia.setText("Heredia");

        jLabel6.setText("Fecha");

        date.setDateFormatString("yyyy/MM/dd");

        jLabel7.setText("Descuento");

        jLabel8.setText("total");

        txttotal.setEnabled(false);

        jButton1.setText("Ventas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 400, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(143, 143, 143)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(33, 33, 33)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtdescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txttotal, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(26, 26, 26)
                                .addComponent(txtarticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtprecio, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4))
                        .addGap(28, 28, 28)
                        .addComponent(txtcantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Alajuela, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88)
                                .addComponent(Heredia, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(cboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(329, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(410, 410, 410))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(txtarticulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addComponent(jLabel6))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtdescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(txtprecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Alajuela)
                            .addComponent(Heredia)
                            .addComponent(jLabel4)
                            .addComponent(txtcantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txttotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setForeground(new java.awt.Color(204, 204, 255));

        BTNagregar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTNagregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/boton-mas.png"))); // NOI18N
        BTNagregar.setText("Agregar");
        BTNagregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNagregarActionPerformed(evt);
            }
        });

        BTNmodificar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTNmodificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/boton-editar.png"))); // NOI18N
        BTNmodificar.setText("Modificar");
        BTNmodificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNmodificarActionPerformed(evt);
            }
        });

        BTNeliminar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTNeliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/eliminar.png"))); // NOI18N
        BTNeliminar.setText("Eliminar");
        BTNeliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNeliminarActionPerformed(evt);
            }
        });

        BTNlimpiar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTNlimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/limpieza-de-datos.png"))); // NOI18N
        BTNlimpiar.setText("Limpiar");
        BTNlimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNlimpiarActionPerformed(evt);
            }
        });

        btnReporte.setText("Reporte");
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });

        BTNsalir.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BTNsalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/salida-de-emergencia.png"))); // NOI18N
        BTNsalir.setText("Salir");
        BTNsalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNsalirActionPerformed(evt);
            }
        });

        BTNexcell.setText("Reporte Excell");
        BTNexcell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNexcellActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(BTNagregar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(BTNmodificar)
                .addGap(31, 31, 31)
                .addComponent(BTNeliminar)
                .addGap(53, 53, 53)
                .addComponent(BTNlimpiar)
                .addGap(18, 18, 18)
                .addComponent(BTNsalir)
                .addGap(57, 57, 57)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BTNexcell)
                    .addComponent(btnReporte))
                .addContainerGap(454, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(btnReporte)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BTNexcell)
                .addGap(26, 26, 26))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTNagregar)
                    .addComponent(BTNmodificar)
                    .addComponent(BTNeliminar)
                    .addComponent(BTNlimpiar)
                    .addComponent(BTNsalir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));

        Table.setBorder(javax.swing.BorderFactory.createTitledBorder("table"));
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Articulo", "fecha", "precio", "cantidad", "sitio", "tipo", "Descuento", "total"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Table);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 430, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AlajuelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlajuelaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AlajuelaActionPerformed

    private void BTNagregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNagregarActionPerformed

        // TODO add your handling code here:
        Agregar();
        Consultar();
        
         ImagenesViewer viewer = new ImagenesViewer();
        viewer.mostrarImagenes(this); // `this` es el JFrame actual
    }//GEN-LAST:event_BTNagregarActionPerformed

    private void BTNmodificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNmodificarActionPerformed
        // TODO add your handling code here:

        modificarRegistro();
        
        ImagenesViewer viewer = new ImagenesViewer();
        viewer.mostrarImagenes(this); // `this` es el JFrame actual
    }//GEN-LAST:event_BTNmodificarActionPerformed

    private void BTNeliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNeliminarActionPerformed
        // TODO add your handling code here:
        eliminarRegistro();
        
        ImagenesViewer viewer = new ImagenesViewer();
        viewer.mostrarImagenes(this); // `this` es el JFrame actual
    }//GEN-LAST:event_BTNeliminarActionPerformed

    private void BTNlimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNlimpiarActionPerformed
        // TODO add your handling code here:
        limpiarCampos();
        
        ImagenesViewer viewer = new ImagenesViewer();
        viewer.mostrarImagenes(this); // `this` es el JFrame actual
    }//GEN-LAST:event_BTNlimpiarActionPerformed

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
            // TODO add your handling code here:
             conexion con = new conexion(); 
    Connection conect = con.getConnection(); // Obtener la conexión de tu clase

    // Llamar al método para generar el PDF
    GeneratePdfReport.generatePdf(conect);

    // Mostrar mensaje de éxito
    JOptionPane.showMessageDialog(null, "PDF generado exitosamente en el escritorio.");
    }//GEN-LAST:event_btnReporteActionPerformed

    private void BTNsalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNsalirActionPerformed
        // TODO add your handling code here:

        int opcion = JOptionPane.showConfirmDialog(null, "¿Seguro que quieres salir?", "Confirmar salida", JOptionPane.YES_NO_OPTION);
        if (opcion == JOptionPane.YES_OPTION) {
            System.exit(0); // Cierra la aplicación
        }

        
        ImagenesViewer viewer = new ImagenesViewer();
        viewer.mostrarImagenes(this); // `this` es el JFrame actual
    }//GEN-LAST:event_BTNsalirActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
      
    int fila = Table.getSelectedRow();
if (fila == -1) {
    JOptionPane.showMessageDialog(null, "Seleccione una fila ");
} else {
    // Obtener los valores actuales de la tabla
    int idc = Integer.parseInt(Table.getValueAt(fila, 0).toString());
    String articulo = Table.getValueAt(fila, 1).toString(); // ARTICULO
    String fecha = Table.getValueAt(fila, 2).toString();    // FECHA
    String precio = Table.getValueAt(fila, 3).toString();    // PRECIO
    String cantidad = Table.getValueAt(fila, 4).toString();  // CANTIDAD
    String sitio = Table.getValueAt(fila, 5).toString();     // SITIO
    String tipo = Table.getValueAt(fila, 6).toString();      // TIPO
    String descuento = Table.getValueAt(fila, 7).toString(); // DESCUENTO
    String total = Table.getValueAt(fila, 8).toString();     // TOTAL
   

    // Convertir el texto de la fecha a un objeto java.util.Date
    java.util.Date fecha2 = null;
    try {
        if (fecha != null && !fecha.trim().isEmpty()) {
            fecha2 = new SimpleDateFormat("yyyy-MM-dd").parse(fecha);
            date.setDate(fecha2);
        } else {
            JOptionPane.showMessageDialog(null, "Fecha no válida o vacía.");
        }
    } catch (ParseException e) {
        JOptionPane.showMessageDialog(null, "Error en el formato de la fecha: " + e.getMessage());
    }

    // Asignar los valores a los campos de texto y otros componentes
    txtarticulo.setText(articulo);
    txtprecio.setText(precio);
    txtcantidad.setText(cantidad);
    txtdescuento.setText(descuento);
    

    if (sitio.equals("Alajuela")) {
        Alajuela.setSelected(true);
        Heredia.setSelected(false);
    } else if (sitio.equals("Heredia")) {
        Alajuela.setSelected(false);
        Heredia.setSelected(true);
    }

    cboTipo.setSelectedItem(tipo);
}

    }//GEN-LAST:event_TableMouseClicked

    private void BTNexcellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNexcellActionPerformed
        // TODO add your handling code here:\       
   conexion con = new conexion(); 
    Connection conect = con.getConnection(); // Obtener la conexión de tu clase

   
        // Llamar al método para generar el reporte Excel
        GenerateExcelReport.generateExcel(conect);

        // Mostrar mensaje de éxito
        JOptionPane.showMessageDialog(null, "Reporte Excel generado exitosamente.");
   
    }//GEN-LAST:event_BTNexcellActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        // Crear y mostrar la ventana de ventas
        Ventas ventasFrame = new Ventas();
        ventasFrame.setVisible(true);
    
    }//GEN-LAST:event_jButton1ActionPerformed
 void Consultar() {
    String sql = "SELECT * FROM veterinaria";
    ResultSet rs = null;
    Statement st = null;
    
    try {
        // Verificar la conexión
        if (conect == null || conect.isClosed()) {
            conect = con.getConnection(); // Vuelve a conectar si la conexión está cerrada
        }
        
        st = conect.createStatement();
        rs = st.executeQuery(sql);
        
        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        model.setRowCount(0); // Limpiar todas las filas existentes
        
        while (rs.next()) {
            Object[] dato = new Object[9];
            dato[0] = rs.getInt("id");
            dato[1] = rs.getString("articulo");
            dato[2] = rs.getDate("fecha"); // Asegúrate de que el formato de fecha es el esperado
            dato[3] = rs.getString("precio");
            dato[4] = rs.getString("cantidad");
            dato[5] = rs.getString("sitio");
            dato[6] = rs.getString("tipo");
            dato[7] = rs.getDouble("descuento");
            dato[8] = rs.getDouble("total");
            
            model.addRow(dato);
        }
        
        Table.setModel(model);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al consultar datos: " + e.getMessage());
    } finally {
        // Cerrar recursos en el bloque finally
        try {
            if (rs != null) rs.close();
            if (st != null) st.close();
            // No cerrar 'conect' aquí, puede necesitar ser reutilizado
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error al cerrar recursos: " + ex.getMessage());
        }
    }
}

    
     public class GenerateExcelReport {

    public static void generateExcel(Connection connection) {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Reporte Veterinaria");

        // Crear una fila para los encabezados
        Row headerRow = sheet.createRow(0);
        String[] headers = {"ID", "Fecha", "Sitio", "Artículo", "Tipo", "Precio", "Cantidad", "Descuento", "Total"};
        for (int i = 0; i < headers.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(headers[i]);
        }

        // Obtener los datos de la base de datos
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery("SELECT id, fecha, sitio, articulo, tipo, precio, cantidad, descuento, total FROM veterinaria");

            int rowNum = 1;
            while (resultSet.next()) {
                Row row = sheet.createRow(rowNum++);

                row.createCell(0).setCellValue(resultSet.getInt("id"));
                row.createCell(1).setCellValue(resultSet.getString("fecha"));
                row.createCell(2).setCellValue(resultSet.getString("sitio"));
                row.createCell(3).setCellValue(resultSet.getString("articulo"));
                row.createCell(4).setCellValue(resultSet.getString("tipo"));
                row.createCell(5).setCellValue(resultSet.getDouble("precio"));
                row.createCell(6).setCellValue(resultSet.getDouble("cantidad"));
                row.createCell(7).setCellValue(resultSet.getDouble("descuento"));
                row.createCell(8).setCellValue(resultSet.getDouble("total"));
                
            }

            // Escribir el archivo Excel
            try (FileOutputStream fileOut = new FileOutputStream("C:/Users/hoshu/OneDrive/Documents/Reporte_Veterinaria.xlsx")) {
                workbook.write(fileOut);
            }

        } catch (SQLException | IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (resultSet != null) resultSet.close();
                if (statement != null) statement.close();
                if (connection != null && !connection.isClosed()) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                workbook.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
    
     
      
     public class GeneratePdfReport {

    public static void generatePdf(Connection connection) {
        Document document = new Document();
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            String ruta = "C:/Users/hoshu/OneDrive/Documents/Reporte_Veterinaria.pdf";
            PdfWriter.getInstance(document, new FileOutputStream(ruta));
            document.open();

            // Crear una tabla con 10 columnas
            PdfPTable table = new PdfPTable(9);

            // Agregar encabezados a la tabla
            table.addCell("ID");
            table.addCell("Fecha");
            table.addCell("Sitio");
            table.addCell("Artículo");
            table.addCell("Tipo");
            table.addCell("Precio");
            table.addCell("Cantidad");
            table.addCell("Descuento");
            table.addCell("Total");
       

            // Crear un statement para obtener los datos de la tabla
            statement = connection.createStatement();
            resultSet = statement.executeQuery("SELECT id, fecha, sitio, articulo, tipo, precio, cantidad, descuento, total FROM veterinaria");

            // Llenar la tabla con los datos obtenidos de la base de datos
            while (resultSet.next()) {
                table.addCell(resultSet.getString("id"));
                table.addCell(resultSet.getString("fecha"));
                table.addCell(resultSet.getString("sitio"));
                table.addCell(resultSet.getString("articulo"));
                table.addCell(resultSet.getString("tipo"));
                table.addCell(resultSet.getString("precio"));
                table.addCell(resultSet.getString("cantidad"));
                table.addCell(resultSet.getString("descuento"));
                table.addCell(resultSet.getString("total"));
               
            }

            document.add(table);
        } catch (DocumentException | IOException | SQLException e) {
            e.printStackTrace();
        } finally {
            document.close();
            try {
                if (resultSet != null) resultSet.close();
                if (statement != null) statement.close();
                if (connection != null && !connection.isClosed()) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}

void modificarRegistro() {
    int filaSeleccionada = Table.getSelectedRow();
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Seleccione una fila para modificar.");
        return;
    }

    // Obtener los valores actuales de la tabla
    String id = Table.getValueAt(filaSeleccionada, 0).toString();
    String fecha = Table.getValueAt(filaSeleccionada, 2).toString(); // FECHA
    String articulo = Table.getValueAt(filaSeleccionada, 1).toString(); // ARTICULO
    String precio = Table.getValueAt(filaSeleccionada, 3).toString(); // PRECIO
    String cantidad = Table.getValueAt(filaSeleccionada, 4).toString(); // CANTIDAD
    String sitio = Table.getValueAt(filaSeleccionada, 5).toString(); // SITIO
    String tipo = Table.getValueAt(filaSeleccionada, 6).toString(); // TIPO
    String descuento = Table.getValueAt(filaSeleccionada, 7).toString(); // DESCUENTO
    String totalActual = Table.getValueAt(filaSeleccionada, 8).toString(); // TOTAL

    // Obtener los nuevos valores desde los campos de texto u otros componentes
    String nuevoArticulo = txtarticulo.getText();
    String nuevoPrecio = txtprecio.getText();
    String nuevoTipo = cboTipo.getSelectedItem().toString();
    String nuevoSitio = Alajuela.isSelected() ? "Alajuela" : "Heredia";
    String nuevaCantidad = txtcantidad.getText();
    String nuevoDescuento = txtdescuento.getText();

    Double nuevoPrecioDouble;
    Double nuevaCantidadDouble;
    Double nuevoDescuentoDouble;
    Double impuestoVenta = 0.13; // 13% IVA
    try {
        nuevoPrecioDouble = Double.parseDouble(nuevoPrecio);
        nuevaCantidadDouble = Double.parseDouble(nuevaCantidad);
        nuevoDescuentoDouble = Double.parseDouble(nuevoDescuento);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Los campos precio, cantidad y descuento deben ser números válidos.");
        return;
    }

    // Calcular el total antes del descuento e IVA
    double total = nuevoPrecioDouble * nuevaCantidadDouble;

    // Aplicar descuento
    double descuentoAplicado = total * (nuevoDescuentoDouble / 100);
    double totalConDescuento = total - descuentoAplicado;

    // Aplicar IVA
    double ivaAplicado = totalConDescuento * impuestoVenta;
    double precioFinal = totalConDescuento + ivaAplicado;

    DecimalFormat df = new DecimalFormat("###.##");

    // Establecer el precio final en el campo txttotal
    txttotal.setText(df.format(precioFinal));

    // Validar datos
    if (nuevoArticulo.isEmpty() || nuevoPrecio.isEmpty() || nuevoTipo.isEmpty() || nuevoSitio.isEmpty() || nuevaCantidad.isEmpty() || nuevoDescuento.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Revise los datos");
        return;
    }

    // Verificar si los nuevos datos son diferentes a los actuales
    if (nuevoArticulo.equals(articulo) && nuevoPrecio.equals(precio) && nuevoTipo.equals(tipo) && nuevoSitio.equals(sitio) && nuevaCantidad.equals(cantidad) && nuevoDescuento.equals(descuento)) {
        JOptionPane.showMessageDialog(null, "No se realizaron cambios.");
        return;
    }

    // Usar PreparedStatement para evitar inyección SQL
    String sql = "UPDATE veterinaria SET fecha=?, articulo=?, precio=?, cantidad=?, sitio=?, tipo=?, descuento=?, total=? WHERE id=?";
    try (PreparedStatement pstmt = conect.prepareStatement(sql)) {
        pstmt.setString(1, fecha);
        pstmt.setString(2, nuevoArticulo);
        pstmt.setDouble(3, nuevoPrecioDouble);
        pstmt.setDouble(4, nuevaCantidadDouble);
        pstmt.setString(5, nuevoSitio);
        pstmt.setString(6, nuevoTipo);
        pstmt.setDouble(7, nuevoDescuentoDouble);
        pstmt.setDouble(8, precioFinal); // Usar precioFinal en lugar de total
        pstmt.setString(9, id);

        int resultado = pstmt.executeUpdate();

        if (resultado > 0) {
            JOptionPane.showMessageDialog(null, "Registro actualizado con éxito");

            // Limpiar campos de texto
            limpiarCampos();

            // Actualizar y limpiar tabla
            Consultar(); // Asegúrate de que este método actualice correctamente la tabla
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el registro para actualizar");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al actualizar el registro: " + e.getMessage());
    }
}


void limpiarCampos() {
    txtarticulo.setText("");  // Limpia el campo de artículo
    txtprecio.setText("");    // Limpia el campo de precio
    txtcantidad.setText("");  // Limpia el campo de cantidad
    txtdescuento.setText(""); // Limpia el campo de descuento
    ((JTextField) date.getDateEditor().getUiComponent()).setText(""); // Limpia el campo de fecha
    cboTipo.setSelectedIndex(0); // Resetea el combo box a la primera opción
    buttonGroup1.clearSelection(); // Limpia la selección de los radio buttons
}


void Agregar() {
    // Obtener valores de los campos de texto y otros componentes
    String articulo = txtarticulo.getText();
    String tipo = cboTipo.getSelectedItem().toString();
    String fecha = ((JTextField) date.getDateEditor().getUiComponent()).getText();
    String sitio = Alajuela.isSelected() ? "Alajuela" : "Heredia";
    
    // Validar y obtener valores numéricos
    Double precio, cantidad, descuento;
    Double impuestoVenta = 0.13; // 13% IVA
    
    try {
        precio = Double.parseDouble(txtprecio.getText());
        cantidad = Double.parseDouble(txtcantidad.getText());
        descuento = Double.parseDouble(txtdescuento.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Los campos precio, cantidad y descuento deben ser números válidos.");
        return;
    }
    
    // Calcular el total antes del descuento e IVA
    double total = precio * cantidad;
    
    // Aplicar descuento
    double descuentoAplicado = total * (descuento / 100);
    double totalConDescuento = total - descuentoAplicado;
    
    // Aplicar IVA
    double ivaAplicado = totalConDescuento * impuestoVenta;
    double totalConIva = totalConDescuento + ivaAplicado;

    // Formatear el total
    DecimalFormat df = new DecimalFormat("###.##");
    String totalFormatted = df.format(totalConIva);
    
    // Establecer el precio final en el campo txttotal
    txttotal.setText(totalFormatted);
    
    try {
        // Validar que todos los campos necesarios estén llenos
        if (articulo.isEmpty() || tipo.equals("Seleccione:") || fecha.isEmpty() || sitio.isEmpty() || txtprecio.getText().isEmpty() || txtcantidad.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese todos los datos");
            return;
        }

        // Preparar y ejecutar la consulta SQL
        String sql = "INSERT INTO veterinaria (articulo, fecha, precio, cantidad, sitio, tipo, descuento, total) " +
                     "VALUES ('" + articulo + "', '" + fecha + "', " + precio + ", " + cantidad + ", '" + sitio + "', '" + tipo + "', " + descuento + ", " + df.format(totalConIva) + ")";
        
        conect = con.getConnection();
        st = conect.createStatement();
        st.executeUpdate(sql);
        
        JOptionPane.showMessageDialog(null, "Datos ingresados");
        
        // Limpiar campos de texto
        txtarticulo.setText("");
        txtprecio.setText("");
        txtcantidad.setText("");
        txtdescuento.setText("");
        txttotal.setText("");
        cboTipo.setSelectedIndex(0);
        Alajuela.setSelected(false);
        Heredia.setSelected(false);

        // Limpiar tabla (asumiendo que hay un método para hacerlo)
        LimpiarTabla();
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}





void LimpiarTabla() {
    // Implementa aquí la lógica para limpiar la tabla en tu interfaz de usuario si es necesario.
}
    void eliminarRegistro() {
    int filaSeleccionada = Table.getSelectedRow();
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Seleccione una fila para eliminar.");
        return;
    }
    
    int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar este registro?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
    if (confirmacion != JOptionPane.YES_OPTION) {
        return;
    }
    
    String id = Table.getValueAt(filaSeleccionada, 0).toString();
    
    try {
        String sql = "DELETE FROM veterinaria WHERE id=" + id;
        conect = con.getConnection();
        st = conect.createStatement();
        int resultado = st.executeUpdate(sql);
        
        if (resultado > 0) {
            JOptionPane.showMessageDialog(null, "Registro eliminado con éxito");
            // Eliminar la fila de la tabla en la interfaz gráfica
            DefaultTableModel model = (DefaultTableModel) Table.getModel();
            model.removeRow(filaSeleccionada);
            Table.setModel(model); // Actualizar la tabla
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el registro para eliminar");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al eliminar el registro: " + e.getMessage());
    } finally {
        // Cerrar recursos en el bloque finally, pero no cerrar la conexión
        try {
            if (st != null) st.close();
            // No cerrar la conexión aquí para que siga abierta
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error al cerrar Statement: " + ex.getMessage());
        }
    }
}


     




  
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Veterinaria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Veterinaria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Veterinaria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Veterinaria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Veterinaria().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Alajuela;
    private javax.swing.JButton BTNagregar;
    private javax.swing.JButton BTNeliminar;
    private javax.swing.JButton BTNexcell;
    private javax.swing.JButton BTNlimpiar;
    private javax.swing.JButton BTNmodificar;
    private javax.swing.JButton BTNsalir;
    private javax.swing.JRadioButton Heredia;
    private javax.swing.JTable Table;
    private javax.swing.JButton btnReporte;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox<String> cboTipo;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtarticulo;
    private javax.swing.JTextField txtcantidad;
    private javax.swing.JTextField txtdescuento;
    private javax.swing.JTextField txtprecio;
    private javax.swing.JTextField txttotal;
    // End of variables declaration//GEN-END:variables
}
